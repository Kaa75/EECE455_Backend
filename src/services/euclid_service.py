def extended_euclid(b, m):
    """
    Computes the Extended Euclidean Algorithm to find coefficients and remainders.

    Parameters:
    - b (int): The number for which the modular inverse is calculated.
    - m (int): The modulus under which to calculate the modular inverse.

    Returns:
    - tuple: (inverse, table)
        - inverse (int or None): The modular inverse if it exists; None otherwise.
        - table (list of lists): The detailed steps of the Euclidean algorithm.
    """
    table = []
    A1, A2, A3 = 1, 0, m
    B1, B2, B3 = 0, 1, b
    table.append(["-", A1, A2, A3, B1, B2, B3])

    while True:
        if B3 == 0:
            return None, table
        if B3 == 1:
            return B2 % m, table

        Q = A3 // B3
        T1, T2, T3 = A1 - Q * B1, A2 - Q * B2, A3 - Q * B3
        A1, A2, A3 = B1, B2, B3
        B1, B2, B3 = T1, T2, T3
        table.append([Q, A1, A2, A3, B1, B2, B3])

def modular_inverse(a, mod):
    """
    Finds the modular inverse of 'a' under a given modulus using the Extended Euclidean Algorithm.

    Parameters:
    - a (int): The number to invert.
    - mod (int): The modulus under which to calculate the inverse.

    Returns:
    - tuple: (inverse, table)
        - inverse (int): The modular inverse, if it exists; None otherwise.
        - table (list of lists): Detailed steps of the Euclidean algorithm as a table.
    """
    inverse, table = extended_euclid(a, mod)
    return inverse, table

def format_table(table):
    """
    Formats a Euclidean algorithm table for easier readability in HTML.

    Parameters:
    - table (list of lists): The Euclidean table generated by the algorithm.

    Returns:
    - str: An HTML-friendly formatted string representing the Euclidean steps.
    """
    return "<br>".join([" | ".join(map(str, row)) for row in table])
